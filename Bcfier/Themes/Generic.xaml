<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:system="clr-namespace:System;assembly=mscorlib"
  xmlns:themes="clr-namespace:Bcfier.Themes">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/Renga.WPF.Styles;component/Themes/Renga.Implicit.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <SolidColorBrush x:Key="TextPlaceholder_Background" Color="White" />
  <SolidColorBrush x:Key="TextPlaceholder_Foreground" Color="Black" />
  <SolidColorBrush x:Key="TextPlaceholder_PlaceholderColor" Color="Gray" />

  <Style x:Key="{x:Type themes:TextPlaceholder}" TargetType="{x:Type themes:TextPlaceholder}">
    <Setter Property="Background" Value="{StaticResource TextPlaceholder_Background}" />
    <Setter Property="Foreground" Value="{StaticResource TextPlaceholder_Foreground}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Placeholder" Value="Search" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="PlaceholderColor" Value="{StaticResource TextPlaceholder_PlaceholderColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type themes:TextPlaceholder}">
          <Border
            x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{StaticResource Renga.WPF.Styles.Brush.ControlBorder}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="LayoutGrid">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer
                x:Name="PART_ContentHost"
                Grid.Column="0"
                Margin="2" />
              <TextBlock
                x:Name="Placeholder"
                Grid.Column="0"
                Margin="2"
                Padding="2,0,0,0"
                Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlaceholderColor}"
                FontStyle="Italic"
                Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Placeholder}"
                TextWrapping="{TemplateBinding TextWrapping}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Cursor" Value="IBeam" />
            </Trigger>
            <Trigger Property="HasText" Value="True">
              <Setter TargetName="Placeholder" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--  END TEXTPLACEHOLDER  -->


  <!--  LABEL SELECTABLE  -->
  <Style x:Key="{x:Type themes:LabelSelectable}" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="4" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <Border
            Name="Border"
            Padding="2"
            BorderThickness="1"
            CornerRadius="2">

            <ScrollViewer x:Name="PART_ContentHost" Margin="0" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--  END LABEL SELECTABLE  -->

  <!--  BUTTON ICON  -->
  <Style
    x:Key="{x:Type themes:ButtonIcon}"
    BasedOn="{StaticResource {x:Type Button}}"
    TargetType="{x:Type themes:ButtonIcon}">
    <Style.Triggers>
      <Trigger Property="IsVertical" Value="True">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type themes:ButtonIcon}">
              <Border
                Name="ButtonBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                  <StackPanel Margin="5" Orientation="Vertical">
                    <Path
                      Name="Icon"
                      Width="{Binding Path=IconSizeVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                      Height="{Binding Path=IconSizeVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                      Margin="{Binding Path=IconMarginVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                      Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=IconColor, TargetNullValue='#000'}"
                      Data="{Binding Path=IconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                      Stretch="Uniform"
                      UseLayoutRounding="False" />
                    <TextBlock
                      x:Name="MyContentPresenter"
                      MaxWidth="80"
                      Margin="0"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Text="{TemplateBinding Content}"
                      TextAlignment="Center"
                      TextWrapping="Wrap" />
                  </StackPanel>
                </Grid>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                  <Setter TargetName="ButtonBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=HighlightColor, TargetNullValue='#AADAF6'}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                  <Setter TargetName="ButtonBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=HighlightColor, TargetNullValue='#94cdec'}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="MyContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=DisabledIconColor, TargetNullValue='#808080'}" />
                  <Setter TargetName="Icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=DisabledIconColor, TargetNullValue='#808080'}" />
                </Trigger>
                <Trigger Property="HasContent">
                  <Trigger.Value>
                    <system:Boolean>False</system:Boolean>
                  </Trigger.Value>
                  <Setter TargetName="MyContentPresenter" Property="Visibility" Value="Collapsed" />
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>

      <Trigger Property="IsVertical" Value="False">
        <Setter Property="ContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <StackPanel x:Name="ButtonContent" Orientation="Horizontal">
                <Path
                  x:Name="Icon"
                  Width="{Binding Path=IconSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                  Height="{Binding Path=IconSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                  Margin="{Binding Path=IconMargin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                  Fill="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=IconColor, TargetNullValue='#000'}"
                  Data="{Binding Path=IconPath, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}}"
                  Stretch="Uniform"
                  UseLayoutRounding="False" />
                <ContentPresenter
                  Name="MyContentPresenter"
                  Margin="2"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                  RecognizesAccessKey="True" />
              </StackPanel>
              <DataTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="Icon" Property="Fill" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type themes:ButtonIcon}}, Path=DisabledIconColor, TargetNullValue='#808080'}" />
                </Trigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>

  </Style>
  <!--  BUTTON ICON  -->


</ResourceDictionary>